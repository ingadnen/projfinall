{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export function dijkstra(grid,startPoint,endPoint){if(!startPoint||!endPoint||startPoint===endPoint){return false;}startPoint.distance=0;var uncheckedPoints=getPoints(grid);var checkedPointsInOrder=[];while(uncheckedPoints.length!==0){uncheckedPoints.sort(function(a,b){return a.distance-b.distance;});var nearestPoint=uncheckedPoints.shift();if(nearestPoint.distance===Infinity)return checkedPointsInOrder;if(nearestPoint===endPoint)return checkedPointsInOrder;nearestPoint.isChecked=true;checkedPointsInOrder.push(nearestPoint);updateUncheckedNeighbours(nearestPoint,grid);}}function getPoints(grid){var points=[];var _iterator=_createForOfIteratorHelper(grid),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var row=_step.value;var _iterator2=_createForOfIteratorHelper(row),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var point=_step2.value;points.push(point);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return points;}function updateUncheckedNeighbours(point,grid){var uncheckedNeighbours=getUncheckedNeighbours(point,grid);var _iterator3=_createForOfIteratorHelper(uncheckedNeighbours),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var uncheckedNeighbour=_step3.value;uncheckedNeighbour.distance=point.distance+1;uncheckedNeighbour.previousPoint=point;}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}function getUncheckedNeighbours(point,grid){var neighbours=[];var row=point.row,col=point.col;if(row!==0)neighbours.push(grid[row-1][col]);if(col!==grid[0].length-1)neighbours.push(grid[row][col+1]);if(row!==grid.length-1)neighbours.push(grid[row+1][col]);if(col!==0)neighbours.push(grid[row][col-1]);return neighbours.filter(function(neighbour){return!neighbour.isChecked;});}export function getPointsInShortestPathOrderDijkstra(endPoint){var pointsInShortestPathOrder=[];var currentPoint=endPoint;while(currentPoint!==null){pointsInShortestPathOrder.unshift(currentPoint);currentPoint=currentPoint.previousPoint;}return pointsInShortestPathOrder;}","map":{"version":3,"sources":["/Users/m/projfinal/src/Algorithm/dijkstra.js"],"names":["dijkstra","grid","startPoint","endPoint","distance","uncheckedPoints","getPoints","checkedPointsInOrder","length","sort","a","b","nearestPoint","shift","Infinity","isChecked","push","updateUncheckedNeighbours","points","row","point","uncheckedNeighbours","getUncheckedNeighbours","uncheckedNeighbour","previousPoint","neighbours","col","filter","neighbour","getPointsInShortestPathOrderDijkstra","pointsInShortestPathOrder","currentPoint","unshift"],"mappings":"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","sourcesContent":["export function dijkstra(grid, startPoint, endPoint) {\n    if (!startPoint || !endPoint || startPoint === endPoint) {\n        return false;\n    }\n    startPoint.distance = 0;\n    let uncheckedPoints = getPoints(grid);\n    let checkedPointsInOrder = [];\n    while (uncheckedPoints.length !== 0) {\n        uncheckedPoints.sort((a, b) => a.distance - b.distance);\n        let nearestPoint = uncheckedPoints.shift();\n        if (nearestPoint.distance === Infinity) return checkedPointsInOrder;\n        if (nearestPoint === endPoint) return checkedPointsInOrder;\n        nearestPoint.isChecked = true;\n        checkedPointsInOrder.push(nearestPoint);\n        updateUncheckedNeighbours(nearestPoint, grid);\n    }\n}\n\nfunction getPoints(grid) {\n    let points = [];\n    for (let row of grid) {\n        for (let point of row) {\n            points.push(point);\n        }\n    }\n    return points;\n}\n\nfunction updateUncheckedNeighbours(point, grid) {\n    let uncheckedNeighbours = getUncheckedNeighbours(point, grid);\n    for (let uncheckedNeighbour of uncheckedNeighbours) {\n        uncheckedNeighbour.distance = point.distance + 1;\n        uncheckedNeighbour.previousPoint = point;\n    }\n}\n\nfunction getUncheckedNeighbours(point, grid) {\n    let neighbours = [];\n    let { row, col } = point;\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    return neighbours\n        .filter((neighbour) => !neighbour.isChecked);\n}\n\nexport function getPointsInShortestPathOrderDijkstra(endPoint) {\n    let pointsInShortestPathOrder = [];\n    let currentPoint = endPoint;\n    while (currentPoint !== null) {\n        pointsInShortestPathOrder.unshift(currentPoint);\n        currentPoint = currentPoint.previousPoint;\n    }\n    return pointsInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}