{"ast":null,"code":"var _jsxFileName = \"/Users/m/projetfinal/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Node from \"./node\";\nimport NavBar from \"./navbar\";\nimport { dijkstra, getPointsInShortestPathOrderDijkstra } from \"./Algorithm/dijkstra\";\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\nconst startEndPoint = getstartEndPoint(initialNumRows, initialNumColumns);\nconst startPointRow = startEndPoint[0];\nconst startPointCol = startEndPoint[1];\nconst endPointRow = startEndPoint[2];\nconst endPointCol = startEndPoint[3];\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      visualizingAlgorithm: false,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      numRows: initialNumRows,\n      numColumns: initialNumColumns,\n      speed: 10,\n      mazeSpeed: 10\n    };\n\n    this.updateDimensions = () => {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    this.animateShortestPath = (pointsInShortestPathOrder, checkedPointsInOrder) => {\n      if (pointsInShortestPathOrder.length === 1) this.setState({\n        visualizingAlgorithm: false\n      });\n\n      for (let i = 1; i < pointsInShortestPathOrder.length; i++) {\n        if (i === pointsInShortestPathOrder.length - 1) {\n          setTimeout(() => {\n            let newGrid = updatePointsForRender(this.state.grid, pointsInShortestPathOrder, checkedPointsInOrder);\n            this.setState({\n              grid: newGrid,\n              visualizingAlgorithm: false\n            });\n          }, i * (3 * this.state.speed));\n          return;\n        }\n\n        let point = pointsInShortestPathOrder[i];\n        setTimeout(() => {\n          //shortest path point\n          document.getElementById(`node-${point.row}-${point.col}`).className = \"node node-shortest-path\";\n        }, i * (3 * this.state.speed));\n      }\n    };\n\n    this.animateAlgorithm = (checkedPointsInOrder, pointsInShortestPathOrder) => {\n      let newGrid = this.state.grid.slice();\n\n      for (let row of newGrid) {\n        for (let point of row) {\n          let newPoint = { ...point,\n            isVisited: false\n          };\n          newGrid[point.row][point.col] = newPoint;\n        }\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n\n      for (let i = 1; i <= checkedPointsInOrder.length; i++) {\n        let point = checkedPointsInOrder[i];\n\n        if (i === checkedPointsInOrder.length) {\n          setTimeout(() => {\n            this.animateShortestPath(pointsInShortestPathOrder, checkedPointsInOrder);\n          }, i * this.state.speed);\n          return;\n        }\n\n        setTimeout(() => {\n          //checked point\n          document.getElementById(`node-${point.row}-${point.col}`).className = \"node node-visited\";\n        }, i * this.state.speed);\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mouseIsPressed) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  visualizeDijkstra() {\n    if (this.state.visualizingAlgorithm) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const startPoint = grid[startPointRow][startPointCol];\n      const endPoint = grid[endPointRow][endPointCol];\n      const checkedPointsInOrder = dijkstra(grid, startPoint, endPoint);\n      const pointsInShortestPathOrder = getPointsInShortestPathOrderDijkstra(endPoint);\n      this.animateAlgorithm(checkedPointsInOrder, pointsInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  render() {\n    let {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      visualizingAlgorithm: this.state.visualizingAlgorithm,\n      visualizeDijkstra: this.visualizeDijkstra.bind(this),\n      clearGrid: this.clearGrid.bind(this),\n      clearPath: this.clearPath.bind(this),\n      updateSpeed: this.updateSpeed.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.visualizingAlgorithm ? \"grid-visualizing\" : \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 19\n        }\n      }, row.map((point, pointId) => {\n        const {\n          row,\n          col,\n          isStart,\n          isEnd,\n          isVisited,\n          isShortest,\n          isWall\n        } = point;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: pointId,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isEnd: isEnd,\n          isVisited: isVisited,\n          isShortest: isShortest,\n          isWall: isWall,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          width: this.state.width,\n          height: this.state.height,\n          numRows: this.state.numRows,\n          numColumns: this.state.numColumns,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 27\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10);\n  }\n\n  let cellWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cellWidth);\n  return [numRows, numColumns];\n}\n\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n\n  let randomNums2 = [];\n  temp = -2;\n\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n\n  return [randomNums1, randomNums2];\n}\n\nfunction getstartEndPoint(numRows, numColumns) {\n  let randomNums;\n  let x;\n  let y;\n  let startPointRow;\n  let startPointCol;\n  let endPointRow;\n  let endPointCol;\n\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startPointRow = x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    startPointCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    endPointRow = x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n    endPointCol = numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startPointRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    startPointCol = y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    endPointRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n    endPointCol = y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n  }\n\n  return [startPointRow, startPointCol, endPointRow, endPointCol];\n}\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createPoint(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createPoint = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === startPointRow && col === startPointCol,\n    isEnd: row === endPointRow && col === endPointCol,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isShortest: false,\n    isWall: false,\n    previousPoint: null\n  };\n};\n\nconst getNewGridWithWalls = (grid, row, col) => {\n  let newGrid = grid.slice();\n  let point = grid[row][col];\n  let newPoint = { ...point,\n    isWall: !point.isWall\n  };\n  newGrid[row][col] = newPoint;\n  return newGrid;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let point of row) {\n      let newPoint = { ...point,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousPoint: null\n      };\n      newGrid[point.row][point.col] = newPoint;\n    }\n  }\n\n  return newGrid;\n};\n\nconst updatePointsForRender = (grid, pointsInShortestPathOrder, checkedPointsInOrder) => {\n  let newGrid = grid.slice();\n\n  for (let point of checkedPointsInOrder) {\n    if (point.row === startPointRow && point.col === startPointCol || point.row === endPointRow && point.col === endPointCol) continue;\n    let newPoint = { ...point,\n      isVisited: true\n    };\n    newGrid[point.row][point.col] = newPoint;\n  }\n\n  for (let point of pointsInShortestPathOrder) {\n    if (point.row === endPointRow && point.col === endPointCol) {\n      return newGrid;\n    }\n\n    let newPoint = { ...point,\n      isVisited: false,\n      isShortest: true\n    };\n    newGrid[point.row][point.col] = newPoint;\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/m/projetfinal/src/App.js"],"names":["React","Component","Node","NavBar","dijkstra","getPointsInShortestPathOrderDijkstra","initialNum","getInitialNum","window","innerWidth","innerHeight","initialNumRows","initialNumColumns","startEndPoint","getstartEndPoint","startPointRow","startPointCol","endPointRow","endPointCol","App","state","grid","mouseIsPressed","visualizingAlgorithm","width","height","numRows","numColumns","speed","mazeSpeed","updateDimensions","setState","animateShortestPath","pointsInShortestPathOrder","checkedPointsInOrder","length","i","setTimeout","newGrid","updatePointsForRender","point","document","getElementById","row","col","className","animateAlgorithm","slice","newPoint","isVisited","componentDidMount","addEventListener","getInitialGrid","handleMouseDown","getNewGridWithWalls","handleMouseEnter","handleMouseUp","visualizeDijkstra","startPoint","endPoint","render","bind","clearGrid","clearPath","updateSpeed","map","rowId","pointId","isStart","isEnd","isShortest","isWall","Math","floor","cellWidth","getRandomNums","num","randomNums1","temp","push","randomNums2","randomNums","x","y","random","currentRow","createPoint","distance","Infinity","totalDistance","previousPoint","getGridWithoutPath"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Node from \"./node\";\nimport NavBar from \"./navbar\";\n\n\nimport {\n  dijkstra,\n  getPointsInShortestPathOrderDijkstra,\n} from \"./Algorithm/dijkstra\";\n\n\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\n\nconst startEndPoint = getstartEndPoint(initialNumRows, initialNumColumns);\nconst startPointRow = startEndPoint[0];\nconst startPointCol = startEndPoint[1];\nconst endPointRow = startEndPoint[2];\nconst endPointCol = startEndPoint[3];\n\nclass App extends Component {\n  state = {\n    grid: [],\n    mouseIsPressed: false,\n    visualizingAlgorithm: false,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    numRows: initialNumRows,\n    numColumns: initialNumColumns,\n    speed: 10,\n   mazeSpeed: 10,\n  };\n\n  updateDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  \n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mouseIsPressed) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateShortestPath = (pointsInShortestPathOrder, checkedPointsInOrder) => {\n    if (pointsInShortestPathOrder.length === 1)\n      this.setState({ visualizingAlgorithm: false });\n    for (let i = 1; i < pointsInShortestPathOrder.length; i++) {\n      if (i === pointsInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          let newGrid = updatePointsForRender(\n              this.state.grid,\n              pointsInShortestPathOrder,\n              checkedPointsInOrder\n          );\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\n        }, i * (3 * this.state.speed));\n        return;\n      }\n      let point = pointsInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path point\n        document.getElementById(`node-${point.row}-${point.col}`).className =\n            \"node node-shortest-path\";\n      }, i * (3 * this.state.speed));\n    }\n  };\n\n  animateAlgorithm = (checkedPointsInOrder, pointsInShortestPathOrder) => {\n    let newGrid = this.state.grid.slice();\n    for (let row of newGrid) {\n      for (let point of row) {\n        let newPoint = {\n          ...point,\n          isVisited: false,\n        };\n        newGrid[point.row][point.col] = newPoint;\n      }\n    }\n    this.setState({ grid: newGrid });\n    for (let i = 1; i <= checkedPointsInOrder.length; i++) {\n      let point = checkedPointsInOrder[i];\n      if (i === checkedPointsInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n              pointsInShortestPathOrder,\n              checkedPointsInOrder\n          );\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //checked point\n        document.getElementById(`node-${point.row}-${point.col}`).className =\n            \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n\n  visualizeDijkstra() {\n    if (this.state.visualizingAlgorithm ) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startPoint = grid[startPointRow][startPointCol];\n      const endPoint = grid[endPointRow][endPointCol];\n      const checkedPointsInOrder = dijkstra(grid, startPoint, endPoint);\n      const pointsInShortestPathOrder = getPointsInShortestPathOrderDijkstra(\n          endPoint\n      );\n      this.animateAlgorithm(checkedPointsInOrder, pointsInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n\n\n  render() {\n    let { grid } = this.state;\n    return (\n        <React.Fragment>\n          <NavBar\n              visualizingAlgorithm={this.state.visualizingAlgorithm}\n\n              visualizeDijkstra={this.visualizeDijkstra.bind(this)}\n\n              clearGrid={this.clearGrid.bind(this)}\n              clearPath={this.clearPath.bind(this)}\n              updateSpeed={this.updateSpeed.bind(this)}\n          />\n          <div\n              className={\n                this.state.visualizingAlgorithm\n                    ? \"grid-visualizing\"\n                    : \"grid\"\n              }\n          >\n            {grid.map((row, rowId) => {\n              return (\n                  <div key={rowId}>\n                    {row.map((point, pointId) => {\n                      const {\n                        row,\n                        col,\n                        isStart,\n                        isEnd,\n                        isVisited,\n                        isShortest,\n                        isWall,\n                      } = point;\n                      return (\n                          <Node\n                              key={pointId}\n                              row={row}\n                              col={col}\n                              isStart={isStart}\n                              isEnd={isEnd}\n                              isVisited={isVisited}\n                              isShortest={isShortest}\n                              isWall={isWall}\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                              onMouseEnter={(row, col) =>\n                                  this.handleMouseEnter(row, col)\n                              }\n                              onMouseUp={() => this.handleMouseUp()}\n                              width={this.state.width}\n                              height={this.state.height}\n                              numRows={this.state.numRows}\n                              numColumns={this.state.numColumns}\n                          ></Node>\n                      );\n                    })}\n                  </div>\n              );\n            })}\n          </div>\n        </React.Fragment>\n    );\n  }\n}\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10);\n  }\n  let cellWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cellWidth);\n  return [numRows, numColumns];\n}\n\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n  let randomNums2 = [];\n  temp = -2;\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n  return [randomNums1, randomNums2];\n}\n\nfunction getstartEndPoint(numRows, numColumns) {\n  let randomNums;\n  let x;\n  let y;\n  let startPointRow;\n  let startPointCol;\n  let endPointRow;\n  let endPointCol;\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startPointRow =\n        x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    startPointCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    endPointRow =\n        x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n    endPointCol =\n        numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startPointRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    startPointCol =\n        y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    endPointRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n    endPointCol =\n        y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n  }\n  return [startPointRow, startPointCol, endPointRow, endPointCol];\n}\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createPoint(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createPoint = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === startPointRow && col === startPointCol,\n    isEnd: row === endPointRow && col === endPointCol,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isShortest: false,\n    isWall: false,\n    previousPoint: null,\n  };\n};\n\nconst getNewGridWithWalls = (grid, row, col) => {\n  let newGrid = grid.slice();\n  let point = grid[row][col];\n  let newPoint = {\n    ...point,\n    isWall: !point.isWall,\n  };\n  newGrid[row][col] = newPoint;\n  return newGrid;\n};\n\n\nconst getGridWithoutPath = (grid) => {\n  let newGrid = grid.slice();\n  for (let row of grid) {\n    for (let point of row) {\n      let newPoint = {\n        ...point,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousPoint: null,\n      };\n      newGrid[point.row][point.col] = newPoint;\n    }\n  }\n  return newGrid;\n};\n\nconst updatePointsForRender = (\n    grid,\n    pointsInShortestPathOrder,\n    checkedPointsInOrder\n) => {\n  let newGrid = grid.slice();\n  for (let point of checkedPointsInOrder) {\n    if (\n        (point.row === startPointRow && point.col === startPointCol) ||\n        (point.row === endPointRow && point.col === endPointCol)\n    )\n      continue;\n    let newPoint = {\n      ...point,\n      isVisited: true,\n    };\n    newGrid[point.row][point.col] = newPoint;\n  }\n  for (let point of pointsInShortestPathOrder) {\n    if (point.row === endPointRow && point.col === endPointCol) {\n      return newGrid;\n    }\n    let newPoint = {\n      ...point,\n      isVisited: false,\n      isShortest: true,\n    };\n    newGrid[point.row][point.col] = newPoint;\n  }\n};\n\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}