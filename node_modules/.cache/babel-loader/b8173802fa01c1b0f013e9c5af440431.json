{"ast":null,"code":"import _objectSpread from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _createForOfIteratorHelper from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _classCallCheck from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/m/projfinal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import\"./App.css\";import Point from\"./point\";import NavBar from\"./navbar\";import{dijkstra,getPointsInShortestPathOrderDijkstra}from\"./Algorithm/dijkstra\";var initialNum=getInitialNum(window.innerWidth,window.innerHeight);var initialNumRows=initialNum[0];var initialNumColumns=initialNum[1];var startEndPoint=getStartEndPoint(initialNumRows,initialNumColumns);var startPointRow=startEndPoint[0];var startPointCol=startEndPoint[1];var endPointRow=startEndPoint[2];var endPointCol=startEndPoint[3];var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={grid:[],visualizingAlgorithm:false,width:window.innerWidth,height:window.innerHeight,numRows:initialNumRows,numColumns:initialNumColumns,speed:0.9};_this.updateDimensions=function(){_this.setState({width:window.innerWidth,height:window.innerHeight});};_this.animateShortestPath=function(pointsInShortestPathOrder,checkedPointsInOrder){if(pointsInShortestPathOrder.length===1)_this.setState({visualizingAlgorithm:false});var _loop=function _loop(i){if(i===pointsInShortestPathOrder.length-1){setTimeout(function(){var newGrid=updatePointsForRender(_this.state.grid,pointsInShortestPathOrder,checkedPointsInOrder);_this.setState({grid:newGrid,visualizingAlgorithm:false});},i*(3*_this.state.speed));return{v:void 0};}var point=pointsInShortestPathOrder[i];setTimeout(function(){//shortest path point\ndocument.getElementById(\"point-\".concat(point.row,\"-\").concat(point.col)).className=\"point point-shortest-path\";},i*(3*_this.state.speed));};for(var i=1;i<pointsInShortestPathOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}};_this.animateAlgorithm=function(checkedPointsInOrder,pointsInShortestPathOrder){var newGrid=_this.state.grid.slice();var _iterator=_createForOfIteratorHelper(newGrid),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var row=_step.value;var _iterator2=_createForOfIteratorHelper(row),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var point=_step2.value;var newPoint=_objectSpread(_objectSpread({},point),{},{isChecked:false});newGrid[point.row][point.col]=newPoint;}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}_this.setState({grid:newGrid});var _loop2=function _loop2(i){var point=checkedPointsInOrder[i];if(i===checkedPointsInOrder.length){setTimeout(function(){_this.animateShortestPath(pointsInShortestPathOrder,checkedPointsInOrder);},i*_this.state.speed);return{v:void 0};}setTimeout(function(){//checked point\ndocument.getElementById(\"point-\".concat(point.row,\"-\").concat(point.col)).className=\"point point-visited\";},i*_this.state.speed);};for(var i=1;i<=checkedPointsInOrder.length;i++){var _ret2=_loop2(i);if(typeof _ret2===\"object\")return _ret2.v;}};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){window.addEventListener(\"resize\",this.updateDimensions);var grid=getInitialGrid(this.state.numRows,this.state.numColumns);this.setState({grid:grid});}},{key:\"visualizeDijkstra\",value:function visualizeDijkstra(){var _this2=this;if(this.state.visualizingAlgorithm){return;}this.setState({visualizingAlgorithm:true});setTimeout(function(){var grid=_this2.state.grid;var startPoint=grid[startPointRow][startPointCol];var endPoint=grid[endPointRow][endPointCol];var checkedPointsInOrder=dijkstra(grid,startPoint,endPoint);var pointsInShortestPathOrder=getPointsInShortestPathOrderDijkstra(endPoint);_this2.animateAlgorithm(checkedPointsInOrder,pointsInShortestPathOrder);},this.state.speed);}},{key:\"render\",value:function render(){var _this3=this;var grid=this.state.grid;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(NavBar,{visualizingAlgorithm:this.state.visualizingAlgorithm,visualizeDijkstra:this.visualizeDijkstra.bind(this)}),/*#__PURE__*/React.createElement(\"div\",{className:this.state.visualizingAlgorithm?\"grid-see\":\"grid\"},grid.map(function(row,rowId){return/*#__PURE__*/React.createElement(\"div\",{key:rowId},row.map(function(point,pointId){var row=point.row,col=point.col,isStart=point.isStart,isEnd=point.isEnd,isChecked=point.isChecked,isShortest=point.isShortest;return/*#__PURE__*/React.createElement(Point,{key:pointId,row:row,col:col,isStart:isStart,isEnd:isEnd,isChecked:isChecked,isShortest:isShortest,width:_this3.state.width,height:_this3.state.height,numRows:_this3.state.numRows,numColumns:_this3.state.numColumns});}));})));}}]);return App;}(Component);function getInitialNum(width,height){var numColumns;if(width>1500){numColumns=Math.floor(width/25);}else if(width>1250){numColumns=Math.floor(width/22.5);}else if(width>1000){numColumns=Math.floor(width/20);}else if(width>750){numColumns=Math.floor(width/17.5);}else if(width>500){numColumns=Math.floor(width/15);}else if(width>250){numColumns=Math.floor(width/12.5);}else if(width>0){numColumns=Math.floor(width/10);}var cercleWidth=Math.floor(width/numColumns);var numRows=Math.floor(height/cercleWidth);return[numRows,numColumns];}function getRandomNums(num){var randomNums1=[];var temp=2;for(var i=5;i<num/2;i+=2){randomNums1.push(temp);temp+=2;}var randomNums2=[];temp=-2;for(var _i=num/2;_i<num-5;_i+=2){randomNums2.push(temp);temp-=2;}return[randomNums1,randomNums2];}function getStartEndPoint(numRows,numColumns){var randomNums;var x;var y;var startPointRow;var startPointCol;var endPointRow;var endPointCol;if(numRows<numColumns){randomNums=getRandomNums(numRows);x=Math.floor(numRows/2);y=Math.floor(numColumns/4);if(x%2!==0)x-=1;if(y%2!==0)y+=1;startPointRow=x+randomNums[1][Math.floor(Math.random()*randomNums[1].length)];startPointCol=y+[-6,-4,-2,0][Math.floor(Math.random()*4)];endPointRow=x+randomNums[0][Math.floor(Math.random()*randomNums[0].length)];endPointCol=numColumns-y+[0,2,4,6][Math.floor(Math.random()*4)];}else{randomNums=getRandomNums(numColumns);x=Math.floor(numRows/4);y=Math.floor(numColumns/2);if(x%2!==0)x-=1;if(y%2!==0)y+=1;startPointRow=x+[-6,-4,-2,0][Math.floor(Math.random()*4)];startPointCol=y+randomNums[1][Math.floor(Math.random()*randomNums[1].length)];endPointRow=numRows-x+[0,2,4,6][Math.floor(Math.random()*4)];endPointCol=y+randomNums[0][Math.floor(Math.random()*randomNums[0].length)];}return[startPointRow,startPointCol,endPointRow,endPointCol];}var getInitialGrid=function getInitialGrid(numRows,numColumns){var grid=[];for(var row=0;row<numRows;row++){var currentRow=[];for(var col=0;col<numColumns;col++){currentRow.push(createPoint(row,col));}grid.push(currentRow);}return grid;};var createPoint=function createPoint(row,col){return{row:row,col:col,isStart:row===startPointRow&&col===startPointCol,isEnd:row===endPointRow&&col===endPointCol,distance:Infinity,totalDistance:Infinity,isChecked:false,isShortest:false,previousPoint:null};};var updatePointsForRender=function updatePointsForRender(grid,pointsInShortestPathOrder,checkedPointsInOrder){var newGrid=grid.slice();var _iterator3=_createForOfIteratorHelper(checkedPointsInOrder),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var point=_step3.value;if(point.row===startPointRow&&point.col===startPointCol||point.row===endPointRow&&point.col===endPointCol)continue;var newPoint=_objectSpread(_objectSpread({},point),{},{isChecked:true});newGrid[point.row][point.col]=newPoint;}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}var _iterator4=_createForOfIteratorHelper(pointsInShortestPathOrder),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _point=_step4.value;if(_point.row===endPointRow&&_point.col===endPointCol){return newGrid;}var _newPoint=_objectSpread(_objectSpread({},_point),{},{isChecked:false,isShortest:true});newGrid[_point.row][_point.col]=_newPoint;}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}};export default App;","map":{"version":3,"sources":["/Users/m/projfinal/src/App.js"],"names":["React","Component","Point","NavBar","dijkstra","getPointsInShortestPathOrderDijkstra","initialNum","getInitialNum","window","innerWidth","innerHeight","initialNumRows","initialNumColumns","startEndPoint","getStartEndPoint","startPointRow","startPointCol","endPointRow","endPointCol","App","state","grid","visualizingAlgorithm","width","height","numRows","numColumns","speed","updateDimensions","setState","animateShortestPath","pointsInShortestPathOrder","checkedPointsInOrder","length","i","setTimeout","newGrid","updatePointsForRender","point","document","getElementById","row","col","className","animateAlgorithm","slice","newPoint","isChecked","addEventListener","getInitialGrid","startPoint","endPoint","visualizeDijkstra","bind","map","rowId","pointId","isStart","isEnd","isShortest","Math","floor","cercleWidth","getRandomNums","num","randomNums1","temp","push","randomNums2","randomNums","x","y","random","currentRow","createPoint","distance","Infinity","totalDistance","previousPoint"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Point from \"./point\";\nimport NavBar from \"./navbar\";\n\n\nimport {\n  dijkstra,\n  getPointsInShortestPathOrderDijkstra,\n} from \"./Algorithm/dijkstra\";\n\n\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\n\nconst startEndPoint = getStartEndPoint(initialNumRows, initialNumColumns);\nconst startPointRow = startEndPoint[0];\nconst startPointCol = startEndPoint[1];\nconst endPointRow = startEndPoint[2];\nconst endPointCol = startEndPoint[3];\n\nclass App extends Component {\n  state = {\n    grid: [],\n    visualizingAlgorithm: false,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    numRows: initialNumRows,\n    numColumns: initialNumColumns,\n    speed: 0.9,\n  };\n\n  updateDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({ grid });\n  }\n\n\n  animateShortestPath = (pointsInShortestPathOrder, checkedPointsInOrder) => {\n    if (pointsInShortestPathOrder.length === 1)\n      this.setState({ visualizingAlgorithm: false });\n    for (let i = 1; i < pointsInShortestPathOrder.length; i++) {\n      if (i === pointsInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          let newGrid = updatePointsForRender(\n              this.state.grid,\n              pointsInShortestPathOrder,\n              checkedPointsInOrder\n          );\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\n        }, i * (3 * this.state.speed));\n        return;\n      }\n      let point = pointsInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path point\n        document.getElementById(`point-${point.row}-${point.col}`).className =\n            \"point point-shortest-path\";\n      }, i * (3 * this.state.speed));\n    }\n  };\n\n  animateAlgorithm = (checkedPointsInOrder, pointsInShortestPathOrder) => {\n    let newGrid = this.state.grid.slice();\n    for (let row of newGrid) {\n      for (let point of row) {\n        let newPoint = {\n          ...point,\n          isChecked: false,\n        };\n        newGrid[point.row][point.col] = newPoint;\n      }\n    }\n    this.setState({ grid: newGrid });\n    for (let i = 1; i <= checkedPointsInOrder.length; i++) {\n      let point = checkedPointsInOrder[i];\n      if (i === checkedPointsInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n              pointsInShortestPathOrder,\n              checkedPointsInOrder\n          );\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //checked point\n        document.getElementById(`point-${point.row}-${point.col}`).className =\n            \"point point-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n\n  visualizeDijkstra() {\n    if (this.state.visualizingAlgorithm ) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startPoint = grid[startPointRow][startPointCol];\n      const endPoint = grid[endPointRow][endPointCol];\n      const checkedPointsInOrder = dijkstra(grid, startPoint, endPoint);\n      const pointsInShortestPathOrder = getPointsInShortestPathOrderDijkstra(\n          endPoint\n      );\n      this.animateAlgorithm(checkedPointsInOrder, pointsInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n\n\n  render() {\n    let { grid } = this.state;\n    return (\n        <React.Fragment>\n          <NavBar\n              visualizingAlgorithm={this.state.visualizingAlgorithm}\n              visualizeDijkstra={this.visualizeDijkstra.bind(this)}\n          />\n          <div\n              className={\n                this.state.visualizingAlgorithm\n                    ? \"grid-see\"\n                    : \"grid\"\n              }\n          >\n            {grid.map((row, rowId) => {\n              return (\n                  <div key={rowId}>\n                    {row.map((point, pointId) => {\n                      const {\n                        row,\n                        col,\n                        isStart,\n                        isEnd,\n                        isChecked,\n                        isShortest,\n                      } = point;\n                      return (\n                          <Point\n                              key={pointId}\n                              row={row}\n                              col={col}\n                              isStart={isStart}\n                              isEnd={isEnd}\n                              isChecked={isChecked}\n                              isShortest={isShortest}\n                              width={this.state.width}\n                              height={this.state.height}\n                              numRows={this.state.numRows}\n                              numColumns={this.state.numColumns}\n                          ></Point>\n                      );\n                    })}\n                  </div>\n              );\n            })}\n          </div>\n        </React.Fragment>\n    );\n  }\n}\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10);\n  }\n  let cercleWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cercleWidth);\n  return [numRows, numColumns];\n}\n\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n  let randomNums2 = [];\n  temp = -2;\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n  return [randomNums1, randomNums2];\n}\n\nfunction getStartEndPoint(numRows, numColumns) {\n  let randomNums;\n  let x;\n  let y;\n  let startPointRow;\n  let startPointCol;\n  let endPointRow;\n  let endPointCol;\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startPointRow =\n        x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    startPointCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    endPointRow =\n        x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n    endPointCol =\n        numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startPointRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    startPointCol =\n        y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    endPointRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n    endPointCol =\n        y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n  }\n  return [startPointRow, startPointCol, endPointRow, endPointCol];\n}\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createPoint(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createPoint = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === startPointRow && col === startPointCol,\n    isEnd: row === endPointRow && col === endPointCol,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isChecked: false,\n    isShortest: false,\n    previousPoint: null,\n  };\n};\n\nconst updatePointsForRender = (\n    grid,\n    pointsInShortestPathOrder,\n    checkedPointsInOrder\n) => {\n  let newGrid = grid.slice();\n  for (let point of checkedPointsInOrder) {\n    if (\n        (point.row === startPointRow && point.col === startPointCol) ||\n        (point.row === endPointRow && point.col === endPointCol)\n    )\n      continue;\n    let newPoint = {\n      ...point,\n      isChecked: true,\n    };\n    newGrid[point.row][point.col] = newPoint;\n  }\n  for (let point of pointsInShortestPathOrder) {\n    if (point.row === endPointRow && point.col === endPointCol) {\n      return newGrid;\n    }\n    let newPoint = {\n      ...point,\n      isChecked: false,\n      isShortest: true,\n    };\n    newGrid[point.row][point.col] = newPoint;\n  }\n};\n\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}